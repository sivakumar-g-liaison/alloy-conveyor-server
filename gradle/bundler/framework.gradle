// Framework Bundler Staging Tasks
// ==================================================
//
// ==================================================
// ==================================================
// ==           DO NOT EDIT THIS FILE              ==
// ==================================================
// ==================================================
//
// Please avoid editing this file as deploy scripts depend 
// on conventions established herein. For project specific 
// behavior please follow the conventions documented in 
// README.md and implement in ../bundler_project.gradle
//   (Please vet ideas for change with architecture)


def installPath = file("$rootDir/install").getCanonicalPath()
def installTomcat = "$installPath/tomcat"

configurations {
    deployJre
    deployTomcat
}

dependencies {
    deployJre    "com.oracle.java:jre-linux-x64:${javaRelease}"
    deployTomcat "com.liaison.modified.tomcat:liaison-tomcat-linux-x64-dev:${tomcatVersion}"   
}

// stage JRE in the installer path
// =======================================================================
//TODO write original file name into jre.version.txt
task stageJRE(description: "Fetches and stages JRE for bundler", group: "Production Bundler") << {
    copy {
        from(tarTree(configurations.deployJre.fileCollection{dep -> dep.name == 'jre-linux-x64'}.singleFile))
        into "$installPath"
    }
    ant.move( toDir:"$installPath/jre", overwrite:true ) {
        fileset(dir: "$installPath/jre${javaVersion}")
    }
}
stageJRE.outputs.dir("$installPath/jre")


// stage Tomcat in the installer path
// =======================================================================
//TODO write original file name into tomcat.version.txt

task untarTomcat(description: "Fetches and explodes tomcat", group: "Production Bundler") << {
    copy {
        from(tarTree(configurations.deployTomcat.fileCollection{dep -> dep.name == 'liaison-tomcat-linux-x64-dev'}.singleFile));
        into "$installPath";
    }
    ant.move( toDir:"$installPath/tomcat", overwrite:true ) {
        fileset(dir: "$installPath/liaison-tomcat-dev-${tomcatVersion}")
    }   
}
untarTomcat.outputs.dir("$installPath/tomcat")

task stageTomcatConfig(type: Copy, description: "Stages Tomcat Configurations for bundler", group: "Production Bundler") {
    from ("$rootDir/src/tomcat-environments") {
        include '**/*.*'
    }
    into "$installPath/tomcat-environments"
}
stageTomcatConfig.inputs.dir("$rootDir/src/tomcat-environments")

stageTomcatConfig.outputs.dir("$installPath/tomcat-environments")

task stageTomcat << {
    untarTomcat.execute()
    stageTomcatConfig.execute()
}

//TODO write original file name into war.version.txt
task copyWarToInstall(type: Copy, description: "Copies wars (from output of war) to tomcat/webapps and strips version", group: "Production Bundler") {
	
    from ('service-implementation/build/libs/') {
		include '**/*.war'
	}
	rename '(.+)-\\d\\.\\d\\.\\d-SNAPSHOT(.+)', '$1$2' //TODO discuss with Israel naming and versioning assumptions
    into "$rootDir/install/tomcat/webapps"
}


copyWarToInstall.dependsOn('stageTomcat','war')





