// Framework Bundler Staging Tasks
// ==================================================
//
// ==================================================
// ==================================================
// ==           DO NOT EDIT THIS FILE              ==
// ==================================================
// ==================================================
//
// Please avoid editing this file as deploy scripts depend 
// on conventions established herein. For project specific 
// behavior please follow the conventions documented in 
// README.md and implement in ../bundler_project.gradle
//   (Please vet ideas for change with architecture)

def installPath = file("$rootDir/install").getCanonicalPath()
def installTomcat = "$installPath/tomcat"

configurations {
    deployTomcat
}

dependencies {
    deployTomcat "org.apache.tomcat:tomcat:${tomcatVersion}@zip"
}

// stage Tomcat in the installer path
// =======================================================================
//TODO write original file name into tomcat.version.txt

task untarTomcat(description: "Fetches and explodes tomcat", group: "Production Bundler") << {
    copy {
        from(zipTree(configurations.deployTomcat.fileCollection{dep -> dep.name == 'tomcat'}.singleFile));
        into "$installPath";
    }
    ant.move( toDir:"$installPath/tomcat", overwrite:true ) {
        fileset(dir: "$installPath/apache-tomcat-${tomcatVersion}")
    }   
}
untarTomcat.outputs.dir("$installPath/tomcat")

task stageTomcatConfig(type: Copy, description: "Stages Tomcat Configurations for bundler", group: "Production Bundler") {
    from ("$rootDir/src/tomcat-environments") {
        include '**/*'
    }
    into "$installPath/tomcat-environments"
}
stageTomcatConfig.inputs.dir("$rootDir/src/tomcat-environments")

stageTomcatConfig.outputs.dir("$installPath/tomcat-environments")

task stageTomcat << {
    untarTomcat.execute()
    stageTomcatConfig.execute()
}

//TODO write original file name into war.version.txt
task copyWarToInstall(type: Copy, description: "Copies wars (from output of war) to tomcat/webapps and strips version", group: "Production Bundler") {

    include 'build/libs/**/*.war'

	rename '(.+)-\\d\\.\\d\\.\\d-SNAPSHOT(.+)', '$1$2' //TODO discuss with Israel naming and versioning assumptions
    into "$rootDir/install/tomcat/webapps"
}
copyWarToInstall.dependsOn('stageTomcat','war')

// stage the root level redirect
// =======================================================================
task stageRootWebApp(description: "Replaces the default ROOT webapp with a 301 redirect servlet.", group: "Production Bundler") << {
    delete fileTree(dir: "$rootDir/install/tomcat/webapps/ROOT") 
    copy {
        from ("$rootDir/src/main/ROOT")
        into "$rootDir/install/tomcat/webapps/ROOT"
    }
}
stageRootWebApp.dependsOn('copyWarToInstall')

// cleanup task for the installer bundle staginf folder
// =======================================================================
task cleanBundleStaging(description: "Cleans the bundler staging folder", group: "Production Bundler") << {
	out.println('Cleaning Install Bundle staging folder...' + installPath)
    ant.delete( 
        dir:"$installPath", 
        includes:'**/*', 
        includeemptydirs:true, 
        deleteonexit:true, 
        performGCOnFailedDelete:true
    )
}

task cleanAll { }
cleanAll.dependsOn(clean)
cleanAll.dependsOn(cleanBundleStaging)

task cargoDirectories {
    file(installPath).mkdirs()
    file(installTomcat).mkdirs()
    file("${rootDir}/service-implementation/build/cargoLocal").mkdirs()
}

