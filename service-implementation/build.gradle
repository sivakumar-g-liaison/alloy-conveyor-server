apply plugin: 'war'
apply plugin: 'jetty'
apply plugin: 'cargo'
apply from: file("$rootDir/gradle/bundler/framework.gradle")



// set base name (impacts war name and context path)
project.war.baseName = 'g2mailboxservice'

// Establish version and status
ext.githubProjectName = rootProject.name // Change if github project name is not the same as the root project's name


test { // TODO temp exclusion of j2ep
	exclude 'org/sf/j2ep/*'
	ignoreFailures true }


buildscript {

	repositories {
		mavenCentral()
		maven { url "${thirdpartyArtifactRepoURL}" }              // for ojdbc6.jar
		maven { url 'http://www.eviware.com/repository/maven2/' } // for SoapUI
	}
	apply from: file("$rootDir/gradle/buildscript.gradle"), to: buildscript
	dependencies { // Cargo Plugin
		classpath 'org.gradle.api.plugins:gradle-cargo-plugin:0.6' }

}

allprojects {
	repositories { mavenCentral() }
	configurations.all {
		// This is an incubating gradle language feature (as of 1.5) allowing, in this
		// case, for FOO.pom to be swapped for any sub-dependencies of BAR.pom.
		resolutionStrategy.eachDependency { DependencyResolveDetails details ->
			if (details.requested.name == 'slf4j-simple') {
				//prefer 'slf4j-log4j2' over 'slf4j-simple', because
				//it's required that only one logger.jar be present for deterministic behavior of slf4j
				details.useTarget "org.apache.logging.log4j:log4j-slf4j-impl:2.0-beta7"

			}


		}

	}
}


apply from: file('../gradle/convention.gradle')
apply from: file('../gradle/maven.gradle')
apply from: file('../gradle/check.gradle')
apply from: file('../gradle/license.gradle')

configurations {
	//Need for enhancering via datanucleus.
	jdo { extendsFrom compile }
}



war {

	from('resources') {
		include '*.properties'
		into 'WEB-INF/classes/'
	}

	archiveName="g2mailboxservice.war"


	// TODO
	// Resources used for the Dynamic Services landing page are intentionally kept in the
	// service-framework module (where dynamic services framework is also defined), and
	// outside of the service-implementation.  Eventually the service-framework will be an
	// artifact, and we will be unable to pull in resources like this.
	from("$rootDir/service-framework/src/main/resources") {
		include '**/**';
		into 'WEB-INF/classes/'
	}

	
    // copy webapp
    from('src/main/webapp/ui') {
        include '**/**';
        into '/'
    }

    //webXml = file('src/main/webapp/ui/WEB-INF/web.xml')
}



dependencies {


    // fs2
    compile group: "com.liaison", name: "fs2", version: "0.0.2-SNAPSHOT", changing: true
    
    
    // inherited from NetFlix Karyon
    compile "com.netflix.karyon:karyon-extensions:${karyonVersion}"


	// for commons-codec (used in example encoding service)
	compile 'commons-configuration:commons-configuration:1.8'

	// currently not used during runtime (inherited dependency from NetFlix)
	compile 'com.netflix.eureka:eureka-client:1.1.97'


	compile 'org.slf4j:slf4j-api:1.7.5'
	//compile 'org.slf4j:slf4j-log4j12:1.7.5'



	// for file upload
	// TODO - See that we also depend on "jersey-bundle" inherently
	// TODO - due to NetFlix... using the bundle is not advised... (remove)
	compile 'com.sun.jersey:jersey-core:1.17'
	compile 'com.sun.jersey:jersey-server:1.14'
	compile 'com.sun.jersey:jersey-json:1.17'
	compile 'javax.mail:mail:1.4.6'
	compile 'com.sun.jersey.contribs:jersey-multipart:1.17.1'


	// used for logging
	compile 'org.slf4j:slf4j-api:1.7.5'

	// used for logging

	def log4j2Version = '2.0-beta7';
	compile "org.apache.logging.log4j:log4j-api:$log4j2Version"
	compile "org.apache.logging.log4j:log4j-core:$log4j2Version"
	compile "org.apache.logging.log4j:log4j-slf4j-impl:$log4j2Version"



	// inherited from NetFlix Karyon (TODO integrate with main UI)
	compile project(':karyon-admin-web')

	// reusable utilities / framework components
	compile project(':service-framework')


	compile "com.netflix.karyon:karyon-extensions:${karyonVersion}"

	compile project(':karyon-admin-web')
	compile project(':service-framework')

	// ************************************* beg cargo *********************************************
	def cargoVersion = "1.4.0"
	cargo "org.codehaus.cargo:cargo-core-uberjar:$cargoVersion",
			"org.codehaus.cargo:cargo-ant:$cargoVersion"
	// ************************************* end cargo *********************************************

	// Liaison code
	// A Maven SNAPSHOT module (where the module you request can change over time, even for the same version) is a Gradle "changing module".
	// This syntax will make sure you get the latest version of the SNAPSHOT.
	compile group: "com.liaison", name: "commons-lib", version: "0.0.2-SNAPSHOT", changing: true
	// DataNucleus
	def datanucleusVersion = '3.2.4'    // 3.2.4 core breaks "enhance" but 3.2.5 is not yet in MavenCentral for the other components
	compile "org.datanucleus:datanucleus-core:3.2.5"
	compile "org.datanucleus:datanucleus-api-jpa:${datanucleusVersion}"
	compile "org.datanucleus:datanucleus-rdbms:${datanucleusVersion}"

	// geronimo jpa spec
	compile 'org.apache.geronimo.specs:geronimo-jpa_2.0_spec:1.1'

	// Oracle OJDBC
	// (This dependency is stored in the Liaison Nexus server.)
	// def oracleVersion = '11g-11.2.0.3.0'
	runtime 'com.oracle:ojdbc6:${oracleVersion}'
	compile 'com.oracle:ucp:${oracleVersion}'

	//Junit
	testCompile group: 'junit', name: 'junit', version: '4.+'
}

// Cargo is a thin wrapper that allows you to manipulate Java EE containers in a standard way.
// http://cargo.codehaus.org/
// https://github.com/bmuschko/gradle-cargo-plugin
def installRootPath = "${rootDir}/install"
def tomcatInstallPath = "${installRootPath}/tomcat"
cargo {

	containerId = 'tomcat7x'
	port = new Integer(tomcatHttpPort)

	deployable{
		// NOTE: Override file to make it pick up an existing war instead of that produce by running other tasks
		// file = file('target/contivo-conversion-service-0.0.1.war')
		context = project.war.baseName + "-${versionName}"

		// wait on this URL before continuing
		def pingURL = "http://localhost:${tomcatHttpPort}/${project.war.baseName}/ping"
	}

	local {
		homeDir = file(tomcatInstallPath) // TODO - should this be set from CATALINA_HOME?
		output = file("$buildDir/tomcat-out.log")

		tomcat {
			ajpPort = new Integer(tomcatAjpPort)
		}

		// set the initial value
		if(containerJVMArgs) {
			jvmArgs = "$containerJVMArgs"
		} else {
			jvmArgs = ''
		}

		// the leading space is important
		jvmArgs += " -Darchaius.deployment.applicationId=${project.war.baseName}"
		jvmArgs += " -Darchaius.deployment.environment=${deployEnvironment}"

		// if containerDebug, append tomcat debug args to jvm args
		if(project.hasProperty('containerDebug')) {
			jvmArgs += ' '
			if (project.hasProperty('suspendDebug')) {
				jvmArgs += containerDebugJVMArgs.replace('suspend=n', 'suspend=y')
			} else {
				jvmArgs += containerDebugJVMArgs
			}
		}

		logger.info "=====jvmArgs===="
		logger.info "$jvmArgs"
	}

}

// This is for default config of Tomcat
task configureTomcat(dependsOn: ['stageTomcat']) << {
	//TODO replace tokens would be a nicer but heavier weight way of doing this.
	logger.info "Copying configuring tomcat for environment: ${deployEnvironment}"
	copy {
		from ("${tomcatInstallPath}-configs/common") { include '**/*.*' }
		into tomcatInstallPath
	}
	copy {
		from ("${tomcatInstallPath}-configs/${deployEnvironment}")  { include '**/*.*' }
		into tomcatInstallPath
	}
}
project.afterEvaluate {
/*	cargoRunLocal.dependsOn('configureTomcat')
	cargoStartLocal.dependsOn('configureTomcat')*/
}


// set properties before starting Jetty (via jettyRun or jettyRunWar)
task jettyRunSetProperties {
	
	logger.info "Setting jettyRun system properties"
	// use the default port of the ws-backend-simulation module
	System.setProperty('archaius.deployment.applicationId', project.war.baseName)
	System.setProperty('archaius.deployment.environment', "${deployEnvironment}")
	// we only use jettyRun in dev... might as well output log4j debug
	System.setProperty('log4j.debug', 'true') //TODO Is this correct for log4j2 -jfr

}

// JPA (datanucleus) bytecode enhancement
task enhance  << {
	logger.info("... Enhancing ...");
	ant.taskdef(
			name      : 'datanucleusenhancer',
			classpath : project.runtimeClasspath.asPath,
			classname : 'org.datanucleus.enhancer.EnhancerTask'
			)

	ant.datanucleusenhancer(
			classpath   : (files("$projectDir/src/main/resources") + project.runtimeClasspath).asPath,
			verbose     : true,
			api : "JPA",
			persistenceUnit : "mailbox-pu",
			failonerror : true) {
				fileset( dir : "$buildDir/classes/main/com/liaison/mailbox/jpa/model/" ) { }
			}
}
classes.dependsOn('enhance')

// jettyRun configuration properties
jettyRun {

	dependsOn 'jettyRunSetProperties'
	logger.info "Running jetty"
	httpPort = new Integer(jettyHttpPort)
	reload = 'automatic'
	scanIntervalSeconds = new Integer(jettyScanIntervalSeconds)
	daemon = false

}

// jettyRun configuration properties
jettyRunWar {
	dependsOn 'jettyRunSetProperties'
	logger.info "Running jetty"
	httpPort = new Integer(jettyHttpPort)
	daemon = true
	stopKey='stopJetty'
	stopPort=9999

}

jettyStop{
	
	stopKey='stopJetty'
	stopPort=9999	
}



import org.gradle.api.plugins.jetty.internal.Monitor
[jettyRun, jettyRunWar]*.doLast {
  /**
   * THIS IS A WORKAROUND! THE CURRENT VERSION OF THIS TASK DOESN'T START A WATCHER IN DAEMON MODE
   *
   * If starting the monitor fails, it may be because the jetty task was updated to fix this issue
   * When that happens, we shouldn't need the custom task any more
   *
   * Copied From: AbstractJettyRunTask
   */
   if (getStopPort() != null && getStopPort() > 0 && getStopKey() != null) {
      Monitor monitor = new Monitor(getStopPort(), getStopKey(), server.getProxiedObject());
      monitor.start();
   }
}

/*apply plugin: 'jacoco'

jacocoTestReport {
	
	group = "Reporting"
	description = "Generate Jacoco coverage reports after running tests."
	additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
	reports {
        xml.enabled true
    }
	

    dependsOn 'jettyRunSetProperties'
    logger.info "Running jetty"
    httpPort = new Integer(jettyHttpPort)
    reload = 'automatic'
    scanIntervalSeconds = new Integer(jettyScanIntervalSeconds)
    daemon = false
    webAppSourceDirectory = file('src/main/webapp/ui')

}*/

