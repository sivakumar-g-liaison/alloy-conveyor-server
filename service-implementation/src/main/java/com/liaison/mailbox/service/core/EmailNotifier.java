/**
 * Copyright Liaison Technologies, Inc. All rights reserved.
 *
 * This software is the confidential and proprietary information of
 * Liaison Technologies, Inc. ("Confidential Information").  You shall 
 * not disclose such Confidential Information and shall use it only in
 * accordance with the terms of the license agreement you entered into
 * with Liaison Technologies.
 */

package com.liaison.mailbox.service.core;

import java.io.IOException;
import java.io.InputStream;
import java.util.List;
import java.util.Properties;

import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;

import org.apache.commons.lang.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.netflix.config.ConfigurationManager;

public class EmailNotifier {

	protected static final Logger LOGGER = LoggerFactory.getLogger(EmailNotifier.class);

	public static final String NOTE = "This message is automatically generated by the system.";
	public static final String SUBJECT = "Processor Failure Notifcation.";

	// private static List<String> RECEIVERS;
	private static Properties MAILSERVER_CONFIG = new Properties();

	static {
		fetchConfig();
	}

	/**
	 * Open a specific text file containing mail server parameters, and populate a corresponding
	 * Properties object.
	 */
	private static void fetchConfig() {

		InputStream input = null;
		try {
			Object env = ConfigurationManager.getDeploymentContext().getDeploymentEnvironment();
			String propertyFileName = "g2mailboxservice-" + env + ".properties";
			MAILSERVER_CONFIG.load(Thread.currentThread().getContextClassLoader()
					.getResourceAsStream(propertyFileName));
			// RECEIVERS = new
			// ArrayList<String>(Arrays.asList(StringUtils.split(MAILSERVER_CONFIG.getProperty("recievers"),
			// ",")));
		} catch (IOException ex) {
			System.err.println("Cannot open and load mail server properties file.");
		} finally {
			try {
				if (input != null) {
					input.close();
				}
			} catch (IOException ex) {
				System.err.println("Cannot close mail server properties file.");
			}
		}
	}
    
	/**
	 * Send a single email.
	 */
	public void sendEmail(String subject_subtitle, String message) {

		if (StringUtils.isEmpty(subject_subtitle)) {
			sendEmail("", SUBJECT, message, "TEXT");
		} else {
			sendEmail("", SUBJECT + " - " + subject_subtitle, message, "TEXT");
		}
	}

	/**
	 * Send a single email.
	 */
	public void sendEmail(List<String> toEmailAddrList, String subject, String body, String type) {

		try {

			Session session = Session.getDefaultInstance(MAILSERVER_CONFIG, null);
			MimeMessage message = new MimeMessage(session);

			// the "from" address may be set in code, or set in the
			// config file under "mail.from" ; here, the latter style is used
			message.addHeader("Content-Type", type);
			message.setFrom(new InternetAddress(MAILSERVER_CONFIG.getProperty("mail.from")));

			if ((toEmailAddrList != null) && (toEmailAddrList.size() > 0)) {
				for (String toEmailAddr : toEmailAddrList) {
					message.addRecipient(Message.RecipientType.TO, new InternetAddress(toEmailAddr));
				}
			}
			message.setSubject(subject);
			final String completeMessage = new StringBuffer().append(body).append("\n\n").append(NOTE).toString();
			message.setText(completeMessage);
			Transport.send(message);

		} catch (MessagingException ex) {
			System.err.println("Cannot send email. " + ex);
		}
	}

	/**
	 * Send a single email.
	 */
	public void sendEmail(String aFromEmailAddr, String aToEmailAddr, String aSubject, String aBody) {

		// Here, no Authenticator argument is used (it is null).
		// Authenticators are used to prompt the user for user
		// name and password.
		Session session = Session.getDefaultInstance(MAILSERVER_CONFIG, null);
		MimeMessage message = new MimeMessage(session);
		try {
			// the "from" address may be set in code, or set in the
			// config file under "mail.from" ; here, the latter style is used
			// message.setFrom( new InternetAddress(aFromEmailAddr) );
			message.addRecipient(Message.RecipientType.TO, new InternetAddress(aToEmailAddr));
			message.setSubject(aSubject);
			final String completeMessage = new StringBuffer().append(aBody).append("\n\n").append(NOTE).toString();
			message.setText(completeMessage);
			Transport.send(message);
		} catch (MessagingException ex) {
			System.err.println("Cannot send email. " + ex);
		}
	}

	public static void main(String args[]) {
		EmailNotifier notifier = new EmailNotifier();
		notifier.sendEmail(" sub title ", "testing....");
	}
}