package com.liaison.mailbox.service.core;

import java.io.IOException;
import java.io.InputStream;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Properties;
import javax.mail.*;
import javax.mail.internet.*;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;

public class EmailNotifier {
	protected static final Logger logger = Logger.getLogger(EmailNotifier.class);
    public static final String Note = "This message is automatically generated by the system.  ";
    public static final String Subject = "EMPI Notifcation";
    public static List<String> recievers;

	 private static Properties fMailServerConfig = new Properties();
	 private static Properties receiverConfig = new Properties();
	 
	  static {
		    fetchConfig();
		  }

	  /**
	  * Open a specific text file containing mail server
	  * parameters, and populate a corresponding Properties object.
	  */
	  private static void fetchConfig() {
	    InputStream input = null;
	    try {
	   
	    	//OFFSHORE TODO - use the .properties file ex g2mailboxservice-dev.properties instead of email.properties,receiver.properties
	      fMailServerConfig.load( Thread.currentThread().getContextClassLoader().getResourceAsStream("email.properties") );
	      receiverConfig.load( Thread.currentThread().getContextClassLoader().getResourceAsStream("receiver.properties") );
	      recievers = new ArrayList<String>(Arrays.asList(StringUtils.split(receiverConfig.getProperty("recievers"), ",")));
	    }
	    catch ( IOException ex ){
	      System.err.println("Cannot open and load mail server properties file.");
	    }
	    finally {
	      try {
	        if ( input != null ) input.close();
	      }
	      catch ( IOException ex ){
	        System.err.println( "Cannot close mail server properties file." );
	      }
	    }
	  }
	  
	
	  public void sendEmail(String subject_subtitle, String message) {
		  if(StringUtils.isEmpty(subject_subtitle)) 
			  sendEmail("", recievers, Subject, message);
		  else {
			  sendEmail("", recievers, Subject + " - " + subject_subtitle, message);
		  }
	  }
	  
	  /**
		  * Send a single email.
		  */
		  public void sendEmail(
		    String aFromEmailAddr, List<String> aToEmailAddrList,
		    String aSubject, String aBody
		  ){
	
			try {
				if((aToEmailAddrList != null) && (aToEmailAddrList.size() > 0)) {
					Session session = Session.getDefaultInstance( fMailServerConfig, null );
					MimeMessage message = new MimeMessage( session );
			    
					//the "from" address may be set in code, or set in the
					//config file under "mail.from" ; here, the latter style is used
					//message.setFrom( new InternetAddress(aFromEmailAddr) );
			    	for(String aToEmailAddr: aToEmailAddrList) {
				      message.addRecipient(
				        Message.RecipientType.TO, new InternetAddress(aToEmailAddr)
				      );
			    	}
			    	message.setSubject( aSubject );
			    	final String completeMessage = new StringBuffer().append(aBody).append("\n\n").append(Note).toString();
			    	message.setText( completeMessage );
			    	Transport.send( message );
				}
		    }
		    catch (MessagingException ex){
		      System.err.println("Cannot send email. " + ex);
		    }
		  }
	 /**
	  * Send a single email.
	  */
	  public void sendEmail(
	    String aFromEmailAddr, String aToEmailAddr,
	    String aSubject, String aBody
	  ){
	    //Here, no Authenticator argument is used (it is null).
	    //Authenticators are used to prompt the user for user
	    //name and password.
	    Session session = Session.getDefaultInstance( fMailServerConfig, null );
	    MimeMessage message = new MimeMessage( session );
	    try {
	      //the "from" address may be set in code, or set in the
	      //config file under "mail.from" ; here, the latter style is used
	      //message.setFrom( new InternetAddress(aFromEmailAddr) );
	      message.addRecipient(
	        Message.RecipientType.TO, new InternetAddress(aToEmailAddr)
	      );
	      message.setSubject( aSubject );
	      final String completeMessage = new StringBuffer().append(aBody).append("\n\n").append(Note).toString();
	      message.setText( completeMessage );
	      Transport.send( message );
	    }
	    catch (MessagingException ex){
	      System.err.println("Cannot send email. " + ex);
	    }
	  }
	  
	  public static void main(String args[]) {
		  EmailNotifier notifier = new EmailNotifier();
		  notifier.sendEmail(" sub title ", "testing....");
	  }
}