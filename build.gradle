/*
 * Copyright 2014 Netflix, Inc.
 * Copyright 2014 Liaison Technologies
 *
 *      Licensed under the Apache License, Version 2.0 (the "License");
 *      you may not use this file except in compliance with the License.
 *      You may obtain a copy of the License at
 *
 *          http://www.apache.org/licenses/LICENSE-2.0
 *
 *      Unless required by applicable law or agreed to in writing, software
 *      distributed under the License is distributed on an "AS IS" BASIS,
 *      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *      See the License for the specific language governing permissions and
 *      limitations under the License.
 */

buildscript {
    apply from: file('gradle/buildscript.gradle'), to: buildscript 
}

apply plugin: 'com.kageiit.url-cache'

allprojects {
    apply plugin: 'eclipse' //provides tasks for eclipse. If you don't use eclipse, simply don't use these tasks :)
    apply plugin: 'idea'

    if (JavaVersion.current().isJava8Compatible()) {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
    group = 'com.liaison.alloy.service'
		
	    // Define the Semantic Version number as the first line of RELEASE_NOTES.md
	    file("${rootDir}/RELEASE_NOTES.md").withReader {
	        version = it.readLine()
	    }
		// Define version name used in specifying webapp root context
		if (version.contains('-SNAPSHOT')) {
			ext.versionName = 'v' + (version.substring(0, version.indexOf('-SNAPSHOT'))) 
		} else {
			ext.versionName = "v${version}"		
		}

    repositories { 
        maven { url 'http://nexus.liaison.dev/content/repositories/g2-releases' }
        maven { url 'http://nexus.liaison.dev/content/repositories/g2-third-party' }
        maven { url 'http://nexus.liaison.dev/content/repositories/jboss' }
        maven { url 'http://nexus.liaison.dev/content/repositories/central' }
        maven { url 'http://nexus.liaison.dev/content/repositories/oracle' } // oracle 12c upgrade
    }
    
    configurations {
        all {

            //REJECT karyon admin due to compliance reasons
            all*.exclude group: 'com.netflix.karyon', module: 'karyon-admin'

              // Most of the time this is a bad idea with little upside:   // check for updates every build
              //resolutionStrategy.cacheChangingModulesFor 0, 'seconds'

             //force eureka-client to use 1.1.159
             resolutionStrategy {
                force 'com.netflix.eureka:eureka-client:1.1.159'
            }

            // force the version of transient dependencies for the entire project
         	resolutionStrategy.eachDependency { DependencyResolveDetails details ->
	             //javassist:javassist:3.12.1.GA to org.javassist:javassist:3.18.1-GA
	             if(details.requested.group == 'javassist'){
	                 details.useTarget 'org.javassist:javassist:3.18.1-GA'
	             }
         	}
        }
    }    
}

apply from: file('gradle/convention.gradle')
apply from: file('gradle/slf4j-fix.gradle')
apply from: urlCache.get('https://at4d-vpgitlab.liaison.dev/g2/gradle-configuration/raw/release/2.x.x/sonarqube.gradle')

task showMeCache << {
    configurations.compile.each { println it }
}

subprojects {

    // TODO should move dependencies to subprojects?
    dependencies {

        compile 'com.google.guava:guava:11.0.2'
       
        //swagger
        compile 'com.wordnik:swagger-jersey-jaxrs_2.10:1.3.1'
        testCompile 'org.testng:testng:6.8'

        //Dependency for ACL integration 
        compile 'com.liaison.commons.acl:acl-commons-lib:6.+'

        compile ([group: 'com.liaison', name: 'lib_thread_management', version: '2.+', classifier: 'core'],
                 [group: 'com.liaison', name: 'lib_thread_management', version: '2.+', classifier: 'rest'])
     }

    apply plugin: 'jacoco'
    test {
        ignoreFailures = false
        useTestNG()

        jacoco {
            append = false
            destinationFile = file("${buildDir}/jacoco/unitTest.exec")
            classDumpFile = file("${buildDir}/jacoco/classpathdumps")
        }
    }

    jacoco {
        toolVersion = "0.7.5.201505241946"
        reportsDir = file("${buildDir}/jacoco")
    }

    jacocoTestReport {
        reports {
            xml.enabled false
            csv.enabled false
            html.destination "${buildDir}/jacocoHtml"
        }
    }

}

project(':service-framework') {
    dependencies {

        testCompile 'org.testng:testng:6.8'        
        // commons-io and jackson-core support fs2
        compile 'commons-io:commons-io:2.4'
        compile 'com.fasterxml.jackson.core:jackson-core:2.2.2'

    }
}

allprojects {
    configurations.all {
		
        // make sure we are using the latest commons-io
        resolutionStrategy.eachDependency { DependencyResolveDetails details ->
            if (details.requested.name == 'commons-io') {
                details.useTarget "commons-io:commons-io:2.4"
            }
        }
		
		resolutionStrategy.eachDependency { DependencyResolveDetails details ->
			if (details.requested.name == 'bcprov-jdk16') {
				details.useTarget "org.bouncycastle:bcprov-jdk15on:1.49"
			}
		}
		
		//force eureka-client to use 1.1.159
		resolutionStrategy {
		force 'com.netflix.eureka:eureka-client:1.1.159'
	   }
	   

    }
}

allprojects {
    tasks.withType(JavaCompile) {
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }
}
